/*
  给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。
  一旦你支付此费用，即可选择向上爬一个或者两个台阶。

  你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。

  请你计算并返回达到楼梯顶部的最低花费。

 

    示例 1：

    输入：cost = [10,15,20]
    输出：15
    解释：你将从下标为 1 的台阶开始。
    - 支付 15 ，向上爬两个台阶，到达楼梯顶部。
    总花费为 15 。
    示例 2：

    输入：cost = [1,100,1,1,1,100,1,1,100,1]
    输出：6
    解释：你将从下标为 0 的台阶开始。
    - 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。
    - 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。
    - 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。
    - 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。
    - 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。
    - 支付 1 ，向上爬一个台阶，到达楼梯顶部。
    总花费为 6 。

    来源：力扣（LeetCode）
    链接：https://leetcode.cn/problems/min-cost-climbing-stairs
    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


*/

/*
    1.可以从下标 0 或者 1 出发, 站在台阶上不动是不需要花费的,往上跳才需要.
    2.到达顶楼, 比如 cost [10,15,20], 并非是到达下标 [2] 而是要到 [3]
      (所以到达楼顶 i = arr.length, 遍历的时候 i<=len)

    3.推导 dp 转移方程

    dp[i] --到达 i 层所需要的最小花费

    又 dp[i] = dp[i - 1] + cost[i - 1] // 在终点往下一个台阶往上跳,需要加上倒数第一层自身的花费
    又 dp[i] = dp[i - 2] + cost[i - 2] // 在终点往下两个台阶往上跳,需要加上倒数第二层自身的花费

    // 那么就是比较这两者 求 min (i-1, i-2)

    4.初始化数组: 在 2 中可以得知   dp[0] = 0 ;  dp[1] = 0
    5.遍历顺序: 从 2 开始一直到结束
*/

/**
 * @param {number[]} cost
 * @return {number}
 */
const minCostClimbingStairs = function (cost) {
  const len = cost.length;
  const dp = [0, 0];
  for (let i = 2; i <= len; i++) {
    dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
  }
  return dp[len];
};

console.log(minCostClimbingStairs([10, 15, 20])); // 15
console.log(minCostClimbingStairs([1, 100, 1, 1, 1, 100, 1, 1, 100, 1])); // 6
