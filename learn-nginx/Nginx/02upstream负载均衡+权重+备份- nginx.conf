
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # 负载均衡配置 + 备份和超时

    # 简单配置 upstream需要设置一个名称，这个名称可以在server里面当作proxy主机使用。
    # 默认配置下 为轮询机制 即 1->2->3
    # upstream node-list {
    #     server 127.0.0.1:9001;
    #     server 127.0.0.1:9002;
    #     server 127.0.0.1:9003;
    # }

    # 权重配置 weight=number(不要打空格) 就会按权重分配请求
    # upstream node-list {
    #     server 127.0.0.1:9001 weight=1;
    #     server 127.0.0.1:9002 weight=2;
    #     server 127.0.0.1:9003 weight=3;
    # }

    # 负载均衡的备份服务器+超时设置
    # fail_timeout 是故障等待超时时间(s) fail_timeout 默认为10s
    # max_fails 最小容忍失败请求数 默认为 1
    # backup是备用服务器参数，可以为一个upstream设置一个backup的server，正常请求下不会转发到这个服务器
    # 在生产server全部都出问题之后，可以自动切换到备用server上，为回复服务争取时间

    upstream node-list {
        server 127.0.0.1:9001 fail_timeout=5s weight=1;
        server 127.0.0.1:9002 fail_timeout=2s weight=2;
        server 127.0.0.1:9003 weight=3  backup;
    }

    server {
        # 监听的宽口和host
        listen       3000;
        server_name  127.0.0.1;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            # 第二步 代理到刚才起名为 node-list 的服务器端
            proxy_pass http://node-list/get;
        }

        #error_page  404              /404.html;
        # 自动匹配 404 页面到 html/404.html
        error_page 404 /404.html;


        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
