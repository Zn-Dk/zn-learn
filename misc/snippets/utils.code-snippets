{
	"P.S.": {
		"scope": "javascript,typescript,vue",
		"prefix": "ps",
		"body": [
			"/**",
			"  * @description $5",
			"  * @param {${1:type}} ${2:形参名}",
			"  * @return {${3:type}} ${4:返回值}",
			"*/",
		],
		"description": "文档注释"
	},
	"P.S.Lite": {
		"scope": "javascript,typescript,vue",
		"prefix": "psl",
		"body": [
			"/** $1 */"
		],
		"description": "文档注释 no-wrap ver."
	},
	"Print to console": {
		"prefix": "csl",
		"body": [
			"console.log($1)",
		],
		"description": "Log output to console"
	},
	"Print to console(Display as Dir)": {
		"prefix": "csd",
		"body": [
			"console.dir($1)",
		],
		"description": "Log output to console(Dir)"
	},
	"Print to console(Display Error)": {
		"prefix": "cse",
		"body": [
			"console.error($1)",
		],
		"description": "Log output to console(Error)"
	},
	"Print to console(Display Warning)": {
		"prefix": "csw",
		"body": [
			"console.warn($1)",
		],
		"description": "Log output to console(Warning)"
	},
	"import with destruction": {
		"prefix": "impdest",
		"body": [
			"import {${2:moduleName}} from '$1' ",
		],
		"description": "带参数解构的 import"
	},
	"import function": {
		"prefix": "impfn",
		"body": [
			"() => import('$1')",
		],
		"description": "import function like(async)"
	},
	"import type": {
		"prefix": "imptype",
		"body": [
			"import type { $2 } from '${1:bar}'",
		],
		"description": "引入类型"
	},
	"arrow function": {
		"prefix": "arwfn",
		"body": [
			"($1) => {",
			"  $2",
			"}",
		],
		"description": "arrow function statement"
	},
	"CommonJS Export": {
		"prefix": "mexp",
		"body": [
			"module.exports = {",
			"  $1",
			"}",
		],
		"description": "CommonJS Module Exports"
	}
	// Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}